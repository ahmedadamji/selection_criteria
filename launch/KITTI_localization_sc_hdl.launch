<?xml version="1.0"?>
<launch>
  <!-- arguments -->
  <!-- <arg name="nodelet_manager" default="velodyne_nodelet_manager" /> -->
  <arg name="nodelet_manager" default="velodyne_nodelet_manager" />
  <arg name="enable_floor_detection" default="false" />
  <!-- <arg name="points_topic" default="/velodyne_points" />  -->
  <arg name="points_topic" default="/kitti/velo/pointcloud" />
  <!-- input clouds are transformed in odom_child_frame, and then localization is performed in that frame -->
  <!-- this is useful to match the LIDAR and IMU coodinate systems -->
  <arg name="odom_child_frame_id" default="base_link" />
  <!-- <arg name="odom_child_frame_id" default="velo_link" /> -->

  <!-- Setting Ros Params -->
  <param name="/use_sim_time" value="true" />
  <param name="/dataset" type="string" value="KITTI" />
  <param name="/sequence" type="string" value="06" />
  <param name="/filter_name" type="string" value="" />
  <param name="/number_of_frames" type="int" value="0" />
  <param name="/total_input_points" type="int" value="0" />
  <param name="/total_output_points" type="int" value="0" />
  <param name="/total_filtered_points" type="int" value="0" />
  <param name="/previous_robot_world_frame_coordinate_x" type="double" value="0" />
  <param name="/previous_robot_world_frame_coordinate_y" type="double" value="0" />
  <param name="/previous_robot_world_frame_coordinate_z" type="double" value="0" />



  <arg name="dataset" default="KITTI" />
  <arg name="sequence" default="06" />
  <arg name="filter_name" default="" />

  <arg name="enable_gps" default="false" />
  <arg name="enable_imu_acc" default="false" />
  <arg name="enable_imu_ori" default="false" />


  <!-- optional arguments -->

   <!-- Use the IMU topic seperately to Find Twist Information --> 
  <arg name="use_imu" default="true" /><!-- Disable to maximise the effect of selected points upon visualization of performance-->

  <arg name="invert_imu_acc" default="false" />
  <arg name="invert_imu_gyro" default="false" />
  <arg name="use_global_localization" default="true" />
  <arg name="imu_topic" default="/kitti/oxts/imu" />
  <arg name="enable_robot_odometry_prediction" value="true" />
  <arg name="robot_odom_frame_id" value="odom" />
  <!-- <arg name="robot_odom_frame_id" value="map" /> -->
  <arg name="plot_estimation_errors" value="false" />


  <include file="$(find hdl_global_localization)/launch/hdl_global_localization.launch" if="$(arg use_global_localization)" />


  <!-- transformation between lidar and base_link -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="lidar2base_publisher" args="0 0 0 0 0 0 base_link velo_link 100" /> -->

  <!-- in case you use velodyne_driver, comment out the following line -->
  <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager" output="screen"/>

  <!-- From Dr Abdellatif -->
  <!-- <arg name="scan_matching_output_topic" default="/aide/odometry/sm/map/baselink"/> -->
  <!-- <arg name="odometry_topic" default="/aide/odometry/filtered/psamap/baselink"/> -->

  <!-- prefiltering_nodelet -->
  <node pkg="nodelet" type="nodelet" name="prefiltering_nodelet" args="load hdl_graph_slam/PrefilteringNodelet $(arg nodelet_manager)" output="screen">
      <remap from="/velodyne_points" to="$(arg points_topic)" />
      <remap from="/imu/data" to="$(arg imu_topic)" />
      <!-- <param name="deskewing" value="true" /> -->
      <!-- <param name="scan_period" value="0.1" /> -->
      <param name="base_link_frame" value="base_link" />
      <!-- <param name="base_link_frame" value="velo_link" /> -->
      <!-- This is similar to my radius filter so makes sense to comment, and describe why in my thesis -->
      <param name="use_distance_filter" value="false" />
      <param name="distance_near_thresh" value="0.1" />
      <param name="distance_far_thresh" value="100.0" />
      <param name="downsample_method" value="VOXELGRID" />
      <param name="downsample_resolution" value="0.25" />
      <!-- Note and explain that this is not the same as my radius filter, this is for outlier detection-->
      <param name="outlier_removal_method" value="RADIUS" /> 
      <param name="statistical_mean_k" value="30" />
      <param name="statistical_stddev" value="1.2" />
      <param name="radius_radius" value="0.5" />
      <param name="radius_min_neighbors" value="2" />
  </node>

  <!-- floor_detection_nodelet -->
  <node pkg="nodelet" type="nodelet" name="floor_detection_nodelet" args="load hdl_graph_slam/FloorDetectionNodelet $(arg nodelet_manager)" if="$(arg enable_floor_detection)">
    <param name="points_topic" value="$(arg points_topic)" />
    <param name="tilt_deg" value="0.0" />
    <param name="sensor_height" value="3.0" />
    <param name="height_clip_range" value="1.0" />
    <param name="floor_pts_thresh" value="512" />
    <param name="use_normal_filtering" value="true" />
    <param name="normal_filter_thresh" value="20.0" />
  </node>

  <!-- node to remove the floor points from filtered points -->
  <!-- <node pkg="selection_criteria" type="remove_floor" name="remove_floor" output="screen"/> -->

  <!-- calling the selection_criteria node to filter out point clouds -->
  <node pkg="selection_criteria" type="selection_criteria_localization" name="selection_criteria_localization" output="screen">
    <!-- <remap from="/floor_points" to="/floor_detection/floor_filtered_points" /> -->
    <remap from="/points_input" to="/filtered_points" />
  </node>


    <!-- globalmap_server_nodelet -->
    <!-- <node pkg="nodelet" type="nodelet" name="globalmap_server_nodelet" args="load hdl_localization/GlobalmapServerNodelet $(arg nodelet_manager)">
      <param name="globalmap_pcd" value="src/data/maps/KITTI_00_Vanilla.pcd" />
      <param name="convert_utm_to_local" value="true" />
      <param name="downsample_resolution" value="0.1" />
    </node> -->

    <!-- globalmap_server_nodelet -->
    <node pkg="nodelet" type="nodelet" name="globalmap_server_nodelet" args="load hdl_localization/GlobalmapServerNodelet $(arg nodelet_manager)">
      <param name="globalmap_pcd" value="src/data/maps/KITTI_06_Vanilla.pcd" />
      <param name="convert_utm_to_local" value="true" />
      <param name="downsample_resolution" value="0.1" />
    </node>


  <!-- hdl_localization_nodelet -->
  <node pkg="nodelet" type="nodelet" name="hdl_localization_nodelet" args="load hdl_localization/HdlLocalizationNodelet $(arg nodelet_manager)">
    <remap from="/velodyne_points" to="/selected_points" />
    <remap from="/gpsimu_driver/imu_data" to="$(arg imu_topic)" />
    <!-- <remap from="/odom" to="$(arg scan_matching_output_topic)"/> -->
    <!-- odometry frame_id -->
    <param name="odom_child_frame_id" value="$(arg odom_child_frame_id)" />
    <!-- imu settings -->
    <!-- during "cool_time", imu inputs are ignored -->
    <param name="use_imu" value="$(arg use_imu)" />
    <param name="invert_acc" value="$(arg invert_imu_acc)" />
    <param name="invert_gyro" value="$(arg invert_imu_gyro)" />
    <param name="cool_time_duration" value="2.0" />

    <!-- constraint switches -->
    <param name="enable_gps" value="$(arg enable_gps)" />
    <param name="enable_imu_acceleration" value="$(arg enable_imu_acc)" />
    <param name="enable_imu_orientation" value="$(arg enable_imu_ori)" />

    <!-- robot odometry-based prediction -->
    <param name="enable_robot_odometry_prediction" value="$(arg enable_robot_odometry_prediction)" />
    <param name="robot_odom_frame_id" value="$(arg robot_odom_frame_id)" />

    <!-- ndt settings --> <!-- Normal Distribution Transforms -->
    <!-- available reg_methods: NDT_OMP, NDT_CUDA_P2D, NDT_CUDA_D2D-->
    <param name="reg_method" value="NDT_OMP" />
    <!-- if NDT is slow for your PC, try DIRECT1 serach method, which is a bit unstable but extremely fast -->
    <!-- <param name="ndt_neighbor_search_method" value="DIRECT7" /> -->
    <param name="ndt_neighbor_search_method" value="DIRECT1" />
    <param name="ndt_neighbor_search_radius" value="3.0" />
    <param name="ndt_resolution" value="5.0" /> <!-- reference for this is the graph slam github, where larger values are better for outdoor environmrnts-->
    <param name="downsample_resolution" value="0.4" /> <!-- can be higher upto 0.3 to 0.5 for outdoor -->
    
    <param name="use_aide_odometry" value="true"/>
    <param name="use_PointMatcher" value="true" />
    <param name="path_to_icp_yaml" value="$(find hdl_localization)/config/PointMatcher_config.yaml"/>
    <param name="path_to_filter_yaml" value="$(find hdl_localization)/config/filter_config.yaml"/>
    
    <!-- if "specify_init_pose" is true, pose estimator will be initialized with the following params -->
    <!-- otherwise, you need to input an initial pose with "2D Pose Estimate" on rviz" -->
    <param name="specify_init_pose" value="true" /> <!--  here if we use the same bag file for localization and mapping we canb have this as true as this is the origin of the map, otherwise we set to false and specify starting position in rviz, in real life this is done using gps.-->
    <param name="init_pos_x" value="0.0" />
    <param name="init_pos_y" value="0.0" />
    <param name="init_pos_z" value="0.0" />
    <param name="init_ori_w" value="1.0" />
    <param name="init_ori_x" value="0.0" />
    <param name="init_ori_y" value="0.0" />
    <param name="init_ori_z" value="0.0" />

    <param name="use_global_localization" value="$(arg use_global_localization)" />

  </node>


  <!-- node to correct the odometry orientations to be compatible with the kitti dataset -->
  <node pkg="selection_criteria" type="correct_odometry_kitti" name="correct_odometry_kitti" output="screen"/>

  <!-- node to transform coordinate frame of the recorded bagfile -->
  <node pkg="selection_criteria" type="transform_frame" name="transform_odom_frame" output="screen"/>

  <!-- node to record odometry to a bagfile -->
  <!-- <node pkg="selection_criteria" type="record_odometry" name="record_odometry" output="screen"/> -->


  <!-- <arg name="bag_name" default="$(arg dataset)_$(arg sequence)_$(arg filter_name)" /> -->
  <arg name="bag_name" default="$(arg dataset)_$(arg sequence)" />
  <node pkg="rosbag" type="record" name="rosbag_record_odom" args="record -O /root/catkin_ws/src/project_ws/catkin_ws/src/data/$(arg dataset)/$(arg sequence)/results/$(arg bag_name) /odom_transformed"/>   
<!-- 
	<arg name="path_save"   default="/root/catkin_ws/src/project_ws/catkin_ws/src/data/KITTI/06"/>
	<arg name="topic"  	default="/odom_transformed"/>
	<arg name="file_name"  	default="odom"/>

	<group ns="record">
		<param name="path_save" type="str" value="$(arg path_save)"	/>
		<param name="topic" 	type="str" value="$(arg topic)"		/>
		<param name="file_name" type="str" value="$(arg file_name)"	/>
		<node name="record_ros" pkg="record_ros" type="record_ros" output="screen" respawn="true"/>
	</group> -->

  <!-- Check this out to view estimation errors -->
  <node pkg="hdl_localization" type="plot_status.py" name="plot_estimation_errors" if="$(arg plot_estimation_errors)" />


</launch>
