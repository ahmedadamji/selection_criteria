<?xml version="1.0"?>
<launch>
  <!-- arguments /rs16_tc/rslidar_points-->
  <arg name="nodelet_manager" default="velodyne_nodelet_manager" />
  <arg name="enable_floor_detection" default="true" />
  <arg name="enable_gps" default="true" />
  <arg name="enable_imu_acc" default="true" />
  <arg name="enable_imu_ori" default="true" />
  <arg name="points_topic" default="/kitti/velo/pointcloud" />

  <arg name="map_frame_id" default="map" />
  <arg name="lidar_odom_frame_id" default="odom" />



  <arg name="dataset" default="KITTI" />
  <!-- <arg name="sequence" default="06" /> -->
  <arg name="sequence" default="06" />
  <arg name="filter_name" default="" />


  <!-- Setting Ros Params -->
  <param name="/use_sim_time" value="true" />
  <param name="/dataset" type="string" value="KITTI" />
  <param name="/sequence" type="string" value="06" />
  <!-- <param name="/sequence" type="string" value="00" /> -->
  <param name="/filter_name" type="string" value="" />
  <param name="/number_of_frames" type="int" value="0" />
  <param name="/total_input_points" type="int" value="0" />
  <param name="/total_output_points" type="int" value="0" />
  <param name="/total_filtered_points" type="int" value="0" />
  <param name="/previous_robot_world_frame_coordinate_x" type="double" value="0" />
  <param name="/previous_robot_world_frame_coordinate_y" type="double" value="0" />
  <param name="/previous_robot_world_frame_coordinate_z" type="double" value="0" />
  <param name="/robot_angular_velocity_x" type="double" value="0" />
  <param name="/robot_angular_velocity_y" type="double" value="0" />
  <param name="/robot_angular_velocity_z" type="double" value="0" />
  <param name="/robot_previous_angular_velocity" type="double" value="0" />
  <param name="/robot_previous_angle" type="double" value="0" />
  <param name="/robot_linear_acceleration_x" type="double" value="0" />
  <param name="/robot_linear_acceleration_y" type="double" value="0" />
  <param name="/robot_linear_acceleration_z" type="double" value="0" />
  <param name="/current_time" type="double" value="0" />
  <param name="/robot_linear_velocity_x" type="double" value="0" />
  <param name="/robot_linear_velocity_y" type="double" value="0" />
  <param name="/robot_linear_velocity_z" type="double" value="0" />
  <param name="/robot_linear_velocity_abs" type="double" value="0" />
  <param name="/robot_previous_linear_velocity_x" type="double" value="0" />
  <param name="/robot_previous_linear_velocity_y" type="double" value="0" />
  <param name="/robot_previous_linear_velocity_z" type="double" value="0" />
  <!-- <param name="/robot_previous_linear_velocity_abs" type="double" value="0" /> -->
  <!-- <param name="/previous_time" type="double" value="1317384506.40" /> -->
  <param name="/previous_time" type="double" value="1317646534.93" />

  <param name="/previous_angle_deviation_min" type="double" value="0.0" />
  <param name="/previous_angle_deviation_max" type="double" value="0.0" />
  <param name="/previous_angle_deviation_mean" type="double" value="0.0" />
  <param name="/previous_angle_deviation_std" type="double" value="0.0" />
  <param name="/previous_matched_angle_deviation" type="int" value="0" />

  <param name="/previous_distance_min" type="double" value="0.0" />
  <param name="/previous_distance_max" type="double" value="0.0" />
  <param name="/previous_distance_mean" type="double" value="0.0" />
  <param name="/previous_distance_std" type="double" value="0.0" />
  <param name="/previous_matched_distance" type="int" value="0" />
 


  <!-- optional arguments -->
  <arg name="enable_robot_odometry_init_guess" default="false" />
  <arg name="robot_odom_frame_id" default="robot_odom" />



  <!-- optional arguments -->

   <!-- Use the IMU topic seperately to Find Twist Information --> 
  <arg name="use_imu" default="true" /><!-- Disable to maximise the effect of selected points upon visualization of performance-->

  <arg name="imu_topic" default="/kitti/oxts/imu" />

  <!-- transformation between lidar and base_link -->
  <node pkg="tf" type="static_transform_publisher" name="lidar2base_publisher" args="0 0 0 0 0 0 base_link velo_link 10" />

  <!-- in case you use velodyne_driver, comment out the following line -->
  <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager" output="screen"/>

  <!-- prefiltering_nodelet -->
  <node pkg="nodelet" type="nodelet" name="prefiltering_nodelet" args="load hdl_graph_slam/PrefilteringNodelet $(arg nodelet_manager)">
    <remap from="/velodyne_points" to="$(arg points_topic)" /> <!-- is this correct?? -->
    <!-- in case base_link_frame is blank, mapping will be performed in the lidar frame -->
    <param name="base_link_frame" value="base_link" />
    <!-- distance filter -->
    <param name="use_distance_filter" value="true" />
    <param name="distance_near_thresh" value="0.1" />
    <param name="distance_far_thresh" value="100.0" />
    <!-- NONE, VOXELGRID, or APPROX_VOXELGRID -->
    <param name="downsample_method" value="VOXELGRID" />
    <param name="downsample_resolution" value="0.25" /> <!-- change the downsampling resolution here -->
    <!-- NONE, RADIUS, or STATISTICAL -->
    <param name="outlier_removal_method" value="RADIUS" />
    <param name="statistical_mean_k" value="30" />
    <param name="statistical_stddev" value="1.2" />
    <param name="radius_radius" value="0.4" /> <!--was 5 before-->
    <param name="radius_min_neighbors" value="2" />
  </node>

  <!-- calling the navsat_odom node to convert from navigation satellite data and inertial measurements into odometry and transforms -->
  <!-- <node pkg="navsat_odometry" type="nodelet" name="navsat_odometry_nodelet" respawn="true">

    <remap from="/kitti/oxts/imu" to="/imu" />
    <remap from="/kitti/oxts/gps/fix" to="/gps" />

  </node> -->

  <!-- calling the selection_criteria node to filter out point clouds -->
  <node pkg="selection_criteria" type="selection_criteria_mapping" name="selection_criteria_mapping" output="screen">
    <!-- <remap from="/floor_points" to="/floor_detection/floor_filtered_points" /> -->
    <remap from="/points_input" to="/filtered_points" />
  </node>
  
  <!-- scan_matching_odometry_nodelet -->
  <node pkg="nodelet" type="nodelet" name="scan_matching_odometry_nodelet" args="load hdl_graph_slam/ScanMatchingOdometryNodelet $(arg nodelet_manager)">
    <!-- <param name="points_topic" value="/selected_points" /> -->
    <param name="points_topic" value="$(arg points_topic)" />
    <remap from="/filtered_points" to="/selected_points" />
    <param name="odom_frame_id" value="$(arg lidar_odom_frame_id)" />
    <!-- <param name="robot_odom_frame_id" value="$(arg robot_odom_frame_id)" /> -->
    <param name="keyframe_delta_trans" value="5.0" />
    <param name="keyframe_delta_angle" value="2.0" />
    <param name="keyframe_delta_time" value="10000.0" />
    <param name="transform_thresholding" value="false" />
    <param name="max_acceptable_trans" value="1.0" />
    <param name="max_acceptable_angle" value="1.0" />
    <param name="downsample_method" value="NONE" />
    <param name="downsample_resolution" value="0.1" />
    <!-- ICP, GICP, NDT, GICP_OMP, NDT_OMP, FAST_GICP(recommended), or FAST_VGICP -->
    <param name="registration_method" value="FAST_GICP" />
    <param name="reg_num_threads" value="0" />
    <param name="reg_transformation_epsilon" value="0.1"/>
    <param name="reg_maximum_iterations" value="64"/>
    <param name="reg_max_correspondence_distance" value="2.0"/>
    <param name="reg_max_optimizer_iterations" value="20"/>
    <param name="reg_use_reciprocal_correspondences" value="false"/>
    <param name="reg_correspondence_randomness" value="20"/>
    <param name="reg_resolution" value="1.0" />
    <param name="reg_nn_search_method" value="DIRECT7" />
  </node>

  <!-- floor_detection_nodelet -->
  <node pkg="nodelet" type="nodelet" name="floor_detection_nodelet" args="load hdl_graph_slam/FloorDetectionNodelet $(arg nodelet_manager)" if="$(arg enable_floor_detection)">
    <!-- <param name="points_topic" value="/selected_points" /> -->
    <param name="points_topic" value="$(arg points_topic)" />
    <remap from="/filtered_points" to="/selected_points" />
    <param name="tilt_deg" value="0.0" />
    <param name="sensor_height" value="3.0" />
    <param name="height_clip_range" value="1.0" />
    <param name="floor_pts_thresh" value="512" />
    <param name="use_normal_filtering" value="true" />
    <param name="normal_filter_thresh" value="20.0" />
  </node>

  <!-- hdl_graph_slam_nodelet -->
  <node pkg="nodelet" type="nodelet" name="hdl_graph_slam_nodelet" args="load hdl_graph_slam/HdlGraphSlamNodelet $(arg nodelet_manager)" output="screen">
    <!-- <param name="points_topic" value="/selected_points" /> -->
    <param name="points_topic" value="$(arg points_topic)" />
    <remap from="/filtered_points" to="/selected_points" />
    <!-- <remap from="/gpsimu_driver/imu_data" to="$(arg imu_topic)" /> -->
    <!-- <param name="points_topic" value="/selected_points" /> -->
    <!-- frame settings -->
    <param name="map_frame_id" value="$(arg map_frame_id)" />
    <param name="odom_frame_id" value="$(arg lidar_odom_frame_id)" />
    <!-- optimization params -->
    <!-- typical solvers: gn_var, gn_fix6_3, gn_var_cholmod, lm_var, lm_fix6_3, lm_var_cholmod, ... -->
    <param name="g2o_solver_type" value="lm_var_cholmod" />
    <param name="g2o_solver_num_iterations" value="512" />
    <!-- constraint switches -->
    <param name="enable_gps" value="$(arg enable_gps)" />
    <param name="enable_imu_acceleration" value="$(arg enable_imu_acc)" />
    <param name="enable_imu_orientation" value="$(arg enable_imu_ori)" />
    <!-- keyframe registration params -->
    <param name="max_keyframes_per_update" value="10" />
    <param name="keyframe_delta_trans" value="5.0" />
    <param name="keyframe_delta_angle" value="2.0" />
    <!-- fix first node for optimization stability -->
    <param name="fix_first_node" value="true"/>
    <param name="fix_first_node_stddev" value="10 10 10 1 1 1"/>
    <param name="fix_first_node_adaptive" value="true"/>
    <!-- loop closure params -->
    <param name="distance_thresh" value="30.0" />
    <param name="accum_distance_thresh" value="25.0" />
    <param name="min_edge_interval" value="15.0" />
    <param name="fitness_score_thresh" value="2.5" />
    <!-- scan matching params -->
    <param name="registration_method" value="FAST_GICP" />
    <param name="reg_num_threads" value="0" />
    <param name="reg_transformation_epsilon" value="0.1"/>
    <param name="reg_maximum_iterations" value="64"/>
    <param name="reg_max_correspondence_distance" value="2.0"/>
    <param name="reg_max_optimizer_iterations" value="20"/>
    <param name="reg_use_reciprocal_correspondences" value="false"/>
    <param name="reg_correspondence_randomness" value="20"/>
    <param name="reg_resolution" value="1.0" />
    <param name="reg_nn_search_method" value="DIRECT7" />
    <!-- edge params -->
    <!-- GPS -->
    <param name="gps_edge_robust_kernel" value="NONE" />
    <param name="gps_edge_robust_kernel_size" value="1.0" />
    <param name="gps_edge_stddev_xy" value="20.0" />
    <param name="gps_edge_stddev_z" value="5.0" />
    <!-- IMU orientation -->
    <param name="imu_orientation_edge_robust_kernel" value="NONE" />
    <param name="imu_orientation_edge_stddev" value="1.0" />
    <!-- IMU acceleration (gravity vector) -->
    <param name="imu_acceleration_edge_robust_kernel" value="NONE" />
    <param name="imu_acceleration_edge_stddev" value="1.0" />
    <!-- ground plane -->
    <param name="floor_edge_robust_kernel" value="NONE" />
    <param name="floor_edge_stddev" value="10.0" />
    <!-- scan matching -->
    <!-- robust kernels: NONE, Cauchy, DCS, Fair, GemanMcClure, Huber, PseudoHuber, Saturated, Tukey, Welsch -->
    <param name="odometry_edge_robust_kernel" value="NONE" />
    <param name="odometry_edge_robust_kernel_size" value="1.0" />
    <param name="loop_closure_edge_robust_kernel" value="Huber" />
    <param name="loop_closure_edge_robust_kernel_size" value="1.0" />
    <param name="use_const_inf_matrix" value="false" />
    <param name="const_stddev_x" value="0.5" />
    <param name="const_stddev_q" value="0.1" />
    <param name="var_gain_a" value="20.0" />
    <param name="min_stddev_x" value="0.1" />
    <param name="max_stddev_x" value="5.0" />
    <param name="min_stddev_q" value="0.05" />
    <param name="max_stddev_q" value="0.2" />
    <!-- update params -->
    <param name="graph_update_interval" value="3.0" />
    <param name="map_cloud_update_interval" value="10.0" />
    <param name="map_cloud_resolution" value="0.05" />
  </node>

  <!-- node to correct the odometry orientations to be compatible with the kitti dataset -->
  <node pkg="selection_criteria" type="correct_odometry_kitti" name="correct_odometry_kitti" output="screen"/>

  <!-- node to transform coordinate frame of the recorded bagfile -->
  <node pkg="selection_criteria" type="transform_frame" name="transform_odom_frame" output="screen"/>

  <!-- node to record odometry to a bagfile -->
  <!-- <node pkg="selection_criteria" type="record_odometry" name="record_odometry" output="screen"/> -->

  <!-- <arg name="bag_name" default="$(arg dataset)_$(arg sequence)_$(arg filter_name)" /> -->
  <arg name="bag_name" default="$(arg dataset)_$(arg sequence)" />
  <node pkg="rosbag" type="record" name="rosbag_record_odom" args="record -O /root/catkin_ws/src/project_ws/catkin_ws/src/data/$(arg dataset)/$(arg sequence)/results/graph_slam/$(arg bag_name) /odom_transformed"/>   
  


  <node pkg="hdl_graph_slam" type="map2odom_publisher.py" name="map2odom_publisher" />
</launch>
