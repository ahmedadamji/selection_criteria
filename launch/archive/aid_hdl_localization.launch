<?xml version="1.0"?>
<launch>
      <!-- arguments -->
      <arg name="nodelet_manager" default="rslidar_nodelet_manager" />
      <arg name="points_topic" default="/rs16_tc/rslidar_points" />
      <!-- input clouds are transformed in odom_child_frame, and then localization is performed in that frame -->
      <!-- this is useful to match the LIDAR and IMU coordinate systems -->
      <arg name="odom_child_frame_id" default="base_link" />
      <!-- optional arguments -->
      <arg name="use_imu" default="false" />
      <arg name="invert_imu_acc" default="false" />
      <arg name="invert_imu_gyro" default="false" />
      <arg name="use_global_localization" default="true" />
      <arg name="imu_topic" default="/imu/data" />
      <arg name="enable_robot_odometry_prediction" value="true" />
      <arg name="robot_odom_frame_id" value="map" />
      <arg name="plot_estimation_errors" value="false" />
      
      <include file="$(find hdl_global_localization)/launch/hdl_global_localization.launch" if="$(arg use_global_localization)" />
      <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager" output="screen"/>

      <arg name="scan_matching_output_topic" default="/aide/odometry/sm/map/baselink"/>
      <arg name="odometry_topic" default="/aide/odometry/filtered/psamap/baselink"/>
 
<!-- prefiltering_nodelet -->
  <node pkg="nodelet" type="nodelet" name="prefiltering_nodelet" args="load hdl_graph_slam/PrefilteringNodelet $(arg nodelet_manager)" output="screen">
      <remap from="/velodyne_points" to="$(arg points_topic)" />
      <remap from="/imu/data" to="$(arg imu_topic)" />
      <param name="deskewing" value="true" />
      <param name="scan_period" value="0.1" />
      <param name="base_link_frame" value="base_link" />
      <param name="use_distance_filter" value="true" />
      <param name="distance_near_thresh" value="10" />
      <param name="distance_far_thresh" value="200.0" />
      <param name="downsample_method" value="VOXELGRID" />
      <param name="downsample_resolution" value="0.3" />
      <param name="outlier_removal_method" value="RADIUS" />
      <param name="statistical_mean_k" value="30" />
      <param name="statistical_stddev" value="1.2" />
      <param name="radius_radius" value="0.5" />
      <param name="radius_min_neighbors" value="2" />
  </node>
 
<!-- hdl_localization_nodelet -->
  <node pkg="nodelet" type="nodelet" name="hdl_localization_nodelet" args="load hdl_localization/HdlLocalizationNodelet $(arg nodelet_manager)">
      <remap from="/velodyne_points" to="/filtered_points" />?
      <remap from="/gpsimu_driver/imu_data" to="$(arg imu_topic)" />
      <remap from="/odom" to="$(arg scan_matching_output_topic)"/>
      <!-- odometry frame_id -->
      <param name="odom_child_frame_id" value="$(arg odom_child_frame_id)" />
      <!-- imu settings -->
      <!-- during "cool_time", imu inputs are ignored -->
      <param name="use_imu" value="$(arg use_imu)" />
      <param name="cool_time_duration" value="2.0" />
      
      <!-- robot odometry-based prediction -->
      <param name="enable_robot_odometry_prediction" value="$(arg enable_robot_odometry_prediction)" />
      <param name="robot_odom_frame_id" value="$(arg robot_odom_frame_id)" />

      <!-- ndt settings -->
      <!-- available reg_methods: NDT_OMP, NDT_CUDA_P2D, NDT_CUDA_D2D-->
      <param name="reg_method" value="NDT_OMP" />
      <!-- if NDT is slow for your PC, try DIRECT1 serach method, which is a bit unstable but extremely fast -->
      <param name="ndt_neighbor_search_method" value="DIRECT7" />
      <param name="ndt_neighbor_search_radius" value="2.0" />
      <param name="ndt_resolution" value="1.0" />
      <param name="downsample_resolution" value="0.1" />
      
      <param name="use_aide_odometry" value="true"/>
      <param name="use_PointMatcher" value="true" />
      <param name="path_to_icp_yaml" value="$(find hdl_localization)/config/PointMatcher_config.yaml"/>
      <param name="path_to_filter_yaml" value="$(find hdl_localization)/config/filter_config.yaml"/>
      
      <!-- if "specify_init_pose" is true, pose estimator will be initialized with the following params -->
      <!-- otherwise, you need to input an initial pose with "2D Pose Estimate" on rviz" -->
      <param name="specify_init_pose" value="false" />
      <param name="init_pos_x" value="0.0" />
      <param name="init_pos_y" value="0.0" />
      <param name="init_pos_z" value="0.0" />
      <param name="init_ori_w" value="1.0" />
      <param name="init_ori_x" value="0.0" />
      <param name="init_ori_y" value="0.0" />
      <param name="init_ori_z" value="0.0" />
      <param name="use_global_localization" value="$(arg use_global_localization)" />
   </node>
</launch>  
