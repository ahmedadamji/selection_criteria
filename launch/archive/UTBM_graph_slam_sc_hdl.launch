<?xml version="1.0"?>
<launch>
  <!-- arguments /rs16_tc/rslidar_points-->
  <arg name="nodelet_manager" default="velodyne_nodelet_manager" />
  <arg name="enable_floor_detection" default="true" />
  <arg name="enable_gps" default="false" />
  <arg name="enable_imu_acc" default="false" />
  <arg name="enable_imu_ori" default="false" />

  <!-- Due to the complexity of working with this dataset, try working with others before reverting to this -->
  <arg name="points_topic" default="/hdl32e_left/velodyne_points" /> <!-- If working with this, may need to sync right and left topics and add them together, will need a seperate script for this before the pre-filtering nodelet-->
  <arg name="map_frame_id" default="map" />
  <arg name="lidar_odom_frame_id" default="odom" />

  <!-- optional arguments -->
  <arg name="enable_robot_odometry_init_guess" default="false" />
  <arg name="robot_odom_frame_id" default="robot_odom" />

  <!-- Source: https://github.com/epan-utbm/utbm_robocar_dataset/blob/baselines/launch/utbm_dataset_play.launch -->
  <!-- Velodyne HDL-32E: left -->
  <group ns="hdl32e_left">
    <node pkg="nodelet" type="nodelet" name="velodyne_left_nodelet_manager" args="manager" output="screen"/>
    <node pkg="nodelet" type="nodelet" name="cloud_nodelet" args="load velodyne_pointcloud/CloudNodelet velodyne_left_nodelet_manager" output="screen">
      <param name="calibration" value="$(find velodyne_pointcloud)/params/32db.yaml"/>
      <param name="min_range" value="0.4"/>
      <param name="max_range" value="130.0"/>
      <param name="view_direction" value="3.1415926"/>
      <param name="view_width" value="5.4769"/>
    </node>
  </group>
  
  <!-- Velodyne HDL-32E: right -->
  <group ns="hdl32e_right">
    <node pkg="nodelet" type="nodelet" name="velodyne_right_nodelet_manager" args="manager" output="screen"/>
    <node pkg="nodelet" type="nodelet" name="cloud_nodelet" args="load velodyne_pointcloud/CloudNodelet velodyne_right_nodelet_manager" output="screen">
      <param name="calibration" value="$(find velodyne_pointcloud)/params/32db.yaml"/>
      <param name="min_range" value="0.4"/>
      <param name="max_range" value="130.0"/>
      <param name="view_direction" value="0.0"/>
      <param name="view_width" value="5.4769"/>
    </node>
  </group>
  
  <!-- ibeo LUX -->
  <node name="sick_ldmrs_object_marker" pkg="sick_ldmrs_tools" type="sick_ldmrs_object_marker" output="screen"/>
  <node name="sick_ldmrs_all_layer_assembler" pkg="sick_ldmrs_tools" type="sick_ldmrs_all_layer_assembler" output="screen">
    <param name="fixed_frame" value="ldmrs_mount_link"/>
  </node>
  <node name="sick_ldmrs_filter_first" pkg="sick_ldmrs_tools" type="sick_ldmrs_filter_first" output="screen">
    <remap from="cloud" to="all_layers"/>
  </node>
  <node name="sick_ldmrs_make_organized" pkg="sick_ldmrs_tools" type="sick_ldmrs_make_organized" output="screen">
    <remap from="cloud" to="first"/>
  </node>
  <node name="sick_ldmrs_remove_background" pkg="sick_ldmrs_tools" type="sick_ldmrs_remove_background" output="screen">
    <remap from="cloud" to="organized"/>
  </node>
  
  <!-- Bumblebee XB3 -->
  <group ns="BBX3_7140017">
    <node pkg="bumblebee_xb3" type="bumblebee_xb3_node" name="bumblebee_xb3_node" output="screen"/>
    <group ns="camera/stereo_camera_LR">
      <node pkg="stereo_image_proc" type="stereo_image_proc" name="stereo_image_proc" output="screen">
	<param name="correlation_window_size" value="31"/>
	<param name="disparity_range" value="128"/>
	<param name="prefilter_size" value="11"/>
	<param name="speckle_range" value="5"/>
	<param name="speckle_size" value="1000"/>
	<param name="stereo_algorithm" value="0"/>
	<param name="texture_threshold" value="0"/>
	<param name="uniqueness_ratio" value="8.0"/>
      </node>
    </group>
  </group>
  
  <!-- Bumblebee 2 -->
  <group ns="BB2_9211442">
    <node pkg="nodelet" type="nodelet" name="bumblebee_nodelet_manager" args="manager"/>
    <node pkg="nodelet" type="nodelet" name="image_proc_debayer_left" args="load image_proc/debayer bumblebee_nodelet_manager">
      <remap from="image_raw" to="left/image_raw"/>
      <remap from="image_mono" to="left/image_mono"/>
      <remap from="image_color" to="left/image_color"/>
    </node>
    <node pkg="nodelet" type="nodelet" name="image_proc_debayer_right" args="load image_proc/debayer bumblebee_nodelet_manager">
      <remap from="image_raw" to="right/image_raw"/>
      <remap from="image_mono" to="right/image_mono"/>
      <remap from="image_color" to="right/image_color"/>
    </node>
    <node pkg="stereo_image_proc" type="stereo_image_proc" name="stereo_image_proc" output="screen"/>
  </group>
  
  <!-- Magellan ProFlex 500 GNSS Receiver -->
  <node pkg="nmea_navsat_driver" type="nmea_topic_driver" name="nmea_topic_driver" output="screen"/>
  <node pkg="gps_common" type="utm_odometry_node" name="utm_odometry_node"/>
  <node pkg="magellan_proflex500_driver" type="magellan_proflex500_driver" name="magellan_proflex500_driver"/>
  
  <!-- tf -->
  <node pkg="tf" type="static_transform_publisher" name="velodyne_left" args="-0.5 1.4 1.5 0 0 0 base_link velodyne_left 100"/>
  <node pkg="tf" type="static_transform_publisher" name="velodyne_right" args="0.5 1.4 1.5 0 0 0 base_link velodyne_right 100"/>
  <node pkg="tf" type="static_transform_publisher" name="ldmrs" args="0 3.6 0 1.57 0 0 base_link ldmrs 100"/>
  <node pkg="tf" type="static_transform_publisher" name="laser" args="-0.5 3.78 0 1.68 0 3.14 base_link laser 100"/>
  <node pkg="tf" type="static_transform_publisher" name="base_imu" args="0 0 0 0 0 0 base_link base_imu 100"/>
  <node pkg="tf" type="static_transform_publisher" name="BBX3_7140017" args="0 1.4 1.5 0 0 -1.57 base_link stereo_camera_LR 100"/>
  <node pkg="tf" type="static_transform_publisher" name="BB2_9211442" args="0 -0.5 1.3 0 3.14 1.4 base_link BB2_9211442 100"/>
  <node pkg="tf" type="static_transform_publisher" name="navsat" args="0 0 0 0 0 0 base_link navsat 100"/>

  <!-- transformation between lidar and base_link -->
  <node pkg="tf" type="static_transform_publisher" name="lidar2base_publisher" args="0 0 0 0 0 0 base_link velodyne 10" />

  <!-- in case you use velodyne_driver, comment out the following line -->
  <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager" output="screen"/>

  <!-- prefiltering_nodelet -->
  <node pkg="nodelet" type="nodelet" name="prefiltering_nodelet" args="load hdl_graph_slam/PrefilteringNodelet $(arg nodelet_manager)">
    <remap from="/velodyne_points" to="$(arg points_topic)" />
    <!-- in case base_link_frame is blank, mapping will be performed in the lidar frame -->
    <param name="base_link_frame" value="base_link" />
    <!-- distance filter -->
    <param name="use_distance_filter" value="true" />
    <param name="distance_near_thresh" value="0.1" />
    <param name="distance_far_thresh" value="100.0" />
    <!-- NONE, VOXELGRID, or APPROX_VOXELGRID -->
    <param name="downsample_method" value="VOXELGRID" />
    <param name="downsample_resolution" value="0.1" />
    <!-- NONE, RADIUS, or STATISTICAL -->
    <param name="outlier_removal_method" value="RADIUS" />
    <param name="statistical_mean_k" value="30" />
    <param name="statistical_stddev" value="1.2" />
    <param name="radius_radius" value="0.5" />
    <param name="radius_min_neighbors" value="2" />
  </node>

  <!-- calling the selection_criteria node to filter out point clouds -->
  <node pkg="selection_criteria" type="selection_criteria_mapping" name="selection_criteria_mapping" output="screen">
    <param name="publish_frequency" type="double" value="10.0" />
  </node>

  
  <!-- scan_matching_odometry_nodelet -->
  <node pkg="nodelet" type="nodelet" name="scan_matching_odometry_nodelet" args="load hdl_graph_slam/ScanMatchingOdometryNodelet $(arg nodelet_manager)">
    <param name="points_topic" value="/selected_points" />
    <param name="odom_frame_id" value="$(arg lidar_odom_frame_id)" />
    <param name="robot_odom_frame_id" value="$(arg robot_odom_frame_id)" />
    <param name="keyframe_delta_trans" value="5.0" />
    <param name="keyframe_delta_angle" value="1.0" />
    <param name="keyframe_delta_time" value="10000.0" />
    <param name="transform_thresholding" value="false" />
    <param name="enable_robot_odometry_init_guess" value="$(arg enable_robot_odometry_init_guess)" />
    <param name="max_acceptable_trans" value="10.0" />
    <param name="max_acceptable_angle" value="1.0" />
    <param name="downsample_method" value="NONE" />
    <param name="downsample_resolution" value="0.1" />
    <!-- ICP, GICP, NDT, GICP_OMP, NDT_OMP, FAST_GICP(recommended), or FAST_VGICP -->
    <param name="registration_method" value="FAST_GICP" />
    <param name="reg_num_threads" value="0" />
    <param name="reg_transformation_epsilon" value="0.1"/>
    <param name="reg_maximum_iterations" value="64"/>
    <param name="reg_max_correspondence_distance" value="2.0"/>
    <param name="reg_max_optimizer_iterations" value="20"/>
    <param name="reg_use_reciprocal_correspondences" value="false"/>
    <param name="reg_correspondence_randomness" value="20"/>
    <param name="reg_resolution" value="1.0" />
    <param name="reg_nn_search_method" value="DIRECT7" />
  </node>

  <!-- floor_detection_nodelet -->
  <node pkg="nodelet" type="nodelet" name="floor_detection_nodelet" args="load hdl_graph_slam/FloorDetectionNodelet $(arg nodelet_manager)" if="$(arg enable_floor_detection)">
    <param name="points_topic" value="/selected_points" />
    <param name="tilt_deg" value="0.0" />
    <param name="sensor_height" value="2.0" />
    <param name="height_clip_range" value="4.0" />
    <param name="floor_pts_thresh" value="512" />
    <param name="use_normal_filtering" value="true" />
    <param name="normal_filter_thresh" value="20.0" />
  </node>

  <!-- hdl_graph_slam_nodelet -->
  <node pkg="nodelet" type="nodelet" name="hdl_graph_slam_nodelet" args="load hdl_graph_slam/HdlGraphSlamNodelet $(arg nodelet_manager)">
    <param name="points_topic" value="/selected_points" />
    <!-- frame settings -->
    <param name="map_frame_id" value="$(arg map_frame_id)" />
    <param name="odom_frame_id" value="$(arg lidar_odom_frame_id)" />
    <!-- optimization params -->
    <!-- typical solvers: gn_var, gn_fix6_3, gn_var_cholmod, lm_var, lm_fix6_3, lm_var_cholmod, ... -->
    <param name="g2o_solver_type" value="lm_var_cholmod" />
    <param name="g2o_solver_num_iterations" value="512" />
    <!-- constraint switches -->
    <param name="enable_gps" value="$(arg enable_gps)" />
    <param name="enable_imu_acceleration" value="$(arg enable_imu_acc)" />
    <param name="enable_imu_orientation" value="$(arg enable_imu_ori)" />
    <!-- keyframe registration params -->
    <param name="max_keyframes_per_update" value="10" />
    <param name="keyframe_delta_trans" value="1.0" />
    <param name="keyframe_delta_angle" value="2.0" />
    <!-- fix first node for optimization stability -->
    <param name="fix_first_node" value="true"/>
    <param name="fix_first_node_stddev" value="10 10 10 1 1 1"/>
    <param name="fix_first_node_adaptive" value="true"/>
    <!-- loop closure params -->
    <param name="distance_thresh" value="15.0" />
    <param name="accum_distance_thresh" value="25.0" />
    <param name="min_edge_interval" value="15.0" />
    <param name="fitness_score_thresh" value="10.5" />
    <!-- scan matching params -->
    <param name="registration_method" value="FAST_GICP" />
    <param name="reg_num_threads" value="0" />
    <param name="reg_transformation_epsilon" value="0.1"/>
    <param name="reg_maximum_iterations" value="64"/>
    <param name="reg_max_correspondence_distance" value="2.0"/>
    <param name="reg_max_optimizer_iterations" value="20"/>
    <param name="reg_use_reciprocal_correspondences" value="false"/>
    <param name="reg_correspondence_randomness" value="20"/>
    <param name="reg_resolution" value="1.0" />
    <param name="reg_nn_search_method" value="DIRECT7" />
    <!-- edge params -->
    <!-- GPS -->
    <param name="gps_edge_robust_kernel" value="NONE" />
    <param name="gps_edge_robust_kernel_size" value="1.0" />
    <param name="gps_edge_stddev_xy" value="20.0" />
    <param name="gps_edge_stddev_z" value="5.0" />
    <!-- IMU orientation -->
    <param name="imu_orientation_edge_robust_kernel" value="NONE" />
    <param name="imu_orientation_edge_stddev" value="1.0" />
    <!-- IMU acceleration (gravity vector) -->
    <param name="imu_acceleration_edge_robust_kernel" value="NONE" />
    <param name="imu_acceleration_edge_stddev" value="1.0" />
    <!-- ground plane -->
    <param name="floor_edge_robust_kernel" value="NONE" />
    <param name="floor_edge_stddev" value="10.0" />
    <!-- scan matching -->
    <!-- robust kernels: NONE, Cauchy, DCS, Fair, GemanMcClure, Huber, PseudoHuber, Saturated, Tukey, Welsch -->
    <param name="odometry_edge_robust_kernel" value="NONE" />
    <param name="odometry_edge_robust_kernel_size" value="1.0" />
    <param name="loop_closure_edge_robust_kernel" value="Huber" />
    <param name="loop_closure_edge_robust_kernel_size" value="1.0" />
    <param name="use_const_inf_matrix" value="false" />
    <param name="const_stddev_x" value="0.5" />
    <param name="const_stddev_q" value="0.1" />
    <param name="var_gain_a" value="20.0" />
    <param name="min_stddev_x" value="0.1" />
    <param name="max_stddev_x" value="5.0" />
    <param name="min_stddev_q" value="0.05" />
    <param name="max_stddev_q" value="0.2" />
    <!-- update params -->
    <param name="graph_update_interval" value="10.0" />
    <param name="map_cloud_update_interval" value="10.0" />
    <param name="map_cloud_resolution" value="0.05" />
  </node>

  <node pkg="hdl_graph_slam" type="map2odom_publisher.py" name="map2odom_publisher" />
</launch>
